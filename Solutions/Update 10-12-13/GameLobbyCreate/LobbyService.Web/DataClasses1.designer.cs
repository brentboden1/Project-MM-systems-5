#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LobbyService.Web
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MonopolyGameDatabase")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLobby(Lobby instance);
    partial void UpdateLobby(Lobby instance);
    partial void DeleteLobby(Lobby instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertEventCardData(EventCardData instance);
    partial void UpdateEventCardData(EventCardData instance);
    partial void DeleteEventCardData(EventCardData instance);
    partial void InsertPlayerLobby(PlayerLobby instance);
    partial void UpdatePlayerLobby(PlayerLobby instance);
    partial void DeletePlayerLobby(PlayerLobby instance);
    partial void InsertHouseCardData(HouseCardData instance);
    partial void UpdateHouseCardData(HouseCardData instance);
    partial void DeleteHouseCardData(HouseCardData instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MonopolyGameDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Lobby> Lobbies
		{
			get
			{
				return this.GetTable<Lobby>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<EventCardData> EventCardDatas
		{
			get
			{
				return this.GetTable<EventCardData>();
			}
		}
		
		public System.Data.Linq.Table<PlayerLobby> PlayerLobbies
		{
			get
			{
				return this.GetTable<PlayerLobby>();
			}
		}
		
		public System.Data.Linq.Table<HouseCardData> HouseCardDatas
		{
			get
			{
				return this.GetTable<HouseCardData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lobby")]
	public partial class Lobby : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LobbyId;
		
		private string _LobbyName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLobbyIdChanging(int value);
    partial void OnLobbyIdChanged();
    partial void OnLobbyNameChanging(string value);
    partial void OnLobbyNameChanged();
    #endregion
		
		public Lobby()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LobbyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LobbyId
		{
			get
			{
				return this._LobbyId;
			}
			set
			{
				if ((this._LobbyId != value))
				{
					this.OnLobbyIdChanging(value);
					this.SendPropertyChanging();
					this._LobbyId = value;
					this.SendPropertyChanged("LobbyId");
					this.OnLobbyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LobbyName", DbType="NChar(10)")]
		public string LobbyName
		{
			get
			{
				return this._LobbyName;
			}
			set
			{
				if ((this._LobbyName != value))
				{
					this.OnLobbyNameChanging(value);
					this.SendPropertyChanging();
					this._LobbyName = value;
					this.SendPropertyChanged("LobbyName");
					this.OnLobbyNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private string _PlayerName;
		
		private bool _AlreadExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnAlreadExistChanging(bool value);
    partial void OnAlreadExistChanged();
    #endregion
		
		public Player()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NChar(10)")]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlreadExist", DbType="Bit NOT NULL")]
		public bool AlreadExist
		{
			get
			{
				return this._AlreadExist;
			}
			set
			{
				if ((this._AlreadExist != value))
				{
					this.OnAlreadExistChanging(value);
					this.SendPropertyChanging();
					this._AlreadExist = value;
					this.SendPropertyChanged("AlreadExist");
					this.OnAlreadExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventCardData")]
	public partial class EventCardData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Type;
		
		private string _Description;
		
		private int _CashChange;
		
		private bool _IsPrison;
		
		private bool _IsEscapePrison;
		
		private bool _IsLocationChange;
		
		private System.Nullable<int> _LocationChangeNum;
		
		private System.Nullable<int> _LocationChangeHard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCashChangeChanging(int value);
    partial void OnCashChangeChanged();
    partial void OnIsPrisonChanging(bool value);
    partial void OnIsPrisonChanged();
    partial void OnIsEscapePrisonChanging(bool value);
    partial void OnIsEscapePrisonChanged();
    partial void OnIsLocationChangeChanging(bool value);
    partial void OnIsLocationChangeChanged();
    partial void OnLocationChangeNumChanging(System.Nullable<int> value);
    partial void OnLocationChangeNumChanged();
    partial void OnLocationChangeHardChanging(System.Nullable<int> value);
    partial void OnLocationChangeHardChanged();
    #endregion
		
		public EventCardData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashChange", DbType="Int NOT NULL")]
		public int CashChange
		{
			get
			{
				return this._CashChange;
			}
			set
			{
				if ((this._CashChange != value))
				{
					this.OnCashChangeChanging(value);
					this.SendPropertyChanging();
					this._CashChange = value;
					this.SendPropertyChanged("CashChange");
					this.OnCashChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrison", DbType="Bit NOT NULL")]
		public bool IsPrison
		{
			get
			{
				return this._IsPrison;
			}
			set
			{
				if ((this._IsPrison != value))
				{
					this.OnIsPrisonChanging(value);
					this.SendPropertyChanging();
					this._IsPrison = value;
					this.SendPropertyChanged("IsPrison");
					this.OnIsPrisonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEscapePrison", DbType="Bit NOT NULL")]
		public bool IsEscapePrison
		{
			get
			{
				return this._IsEscapePrison;
			}
			set
			{
				if ((this._IsEscapePrison != value))
				{
					this.OnIsEscapePrisonChanging(value);
					this.SendPropertyChanging();
					this._IsEscapePrison = value;
					this.SendPropertyChanged("IsEscapePrison");
					this.OnIsEscapePrisonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocationChange", DbType="Bit NOT NULL")]
		public bool IsLocationChange
		{
			get
			{
				return this._IsLocationChange;
			}
			set
			{
				if ((this._IsLocationChange != value))
				{
					this.OnIsLocationChangeChanging(value);
					this.SendPropertyChanging();
					this._IsLocationChange = value;
					this.SendPropertyChanged("IsLocationChange");
					this.OnIsLocationChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationChangeNum", DbType="Int")]
		public System.Nullable<int> LocationChangeNum
		{
			get
			{
				return this._LocationChangeNum;
			}
			set
			{
				if ((this._LocationChangeNum != value))
				{
					this.OnLocationChangeNumChanging(value);
					this.SendPropertyChanging();
					this._LocationChangeNum = value;
					this.SendPropertyChanged("LocationChangeNum");
					this.OnLocationChangeNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationChangeHard", DbType="Int")]
		public System.Nullable<int> LocationChangeHard
		{
			get
			{
				return this._LocationChangeHard;
			}
			set
			{
				if ((this._LocationChangeHard != value))
				{
					this.OnLocationChangeHardChanging(value);
					this.SendPropertyChanging();
					this._LocationChangeHard = value;
					this.SendPropertyChanged("LocationChangeHard");
					this.OnLocationChangeHardChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerLobby")]
	public partial class PlayerLobby : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private int _LobbyId;
		
		private System.Nullable<int> _HostPlayer;
		
		private System.Nullable<bool> _IsWaitingForPlayers;
		
		private System.Nullable<bool> _StartGame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnLobbyIdChanging(int value);
    partial void OnLobbyIdChanged();
    partial void OnHostPlayerChanging(System.Nullable<int> value);
    partial void OnHostPlayerChanged();
    partial void OnIsWaitingForPlayersChanging(System.Nullable<bool> value);
    partial void OnIsWaitingForPlayersChanged();
    partial void OnStartGameChanging(System.Nullable<bool> value);
    partial void OnStartGameChanged();
    #endregion
		
		public PlayerLobby()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LobbyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LobbyId
		{
			get
			{
				return this._LobbyId;
			}
			set
			{
				if ((this._LobbyId != value))
				{
					this.OnLobbyIdChanging(value);
					this.SendPropertyChanging();
					this._LobbyId = value;
					this.SendPropertyChanged("LobbyId");
					this.OnLobbyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostPlayer", DbType="Int")]
		public System.Nullable<int> HostPlayer
		{
			get
			{
				return this._HostPlayer;
			}
			set
			{
				if ((this._HostPlayer != value))
				{
					this.OnHostPlayerChanging(value);
					this.SendPropertyChanging();
					this._HostPlayer = value;
					this.SendPropertyChanged("HostPlayer");
					this.OnHostPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWaitingForPlayers", DbType="Bit")]
		public System.Nullable<bool> IsWaitingForPlayers
		{
			get
			{
				return this._IsWaitingForPlayers;
			}
			set
			{
				if ((this._IsWaitingForPlayers != value))
				{
					this.OnIsWaitingForPlayersChanging(value);
					this.SendPropertyChanging();
					this._IsWaitingForPlayers = value;
					this.SendPropertyChanged("IsWaitingForPlayers");
					this.OnIsWaitingForPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartGame", DbType="Bit")]
		public System.Nullable<bool> StartGame
		{
			get
			{
				return this._StartGame;
			}
			set
			{
				if ((this._StartGame != value))
				{
					this.OnStartGameChanging(value);
					this.SendPropertyChanging();
					this._StartGame = value;
					this.SendPropertyChanged("StartGame");
					this.OnStartGameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HouseCardData")]
	public partial class HouseCardData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _BuyCost;
		
		private int _Rent0;
		
		private int _Rent1;
		
		private int _Rent2;
		
		private int _Rent3;
		
		private int _Rent4;
		
		private int _Rent5;
		
		private string _Type;
		
		private int _Group;
		
		private int _Position;
		
		private int _HouseCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBuyCostChanging(int value);
    partial void OnBuyCostChanged();
    partial void OnRent0Changing(int value);
    partial void OnRent0Changed();
    partial void OnRent1Changing(int value);
    partial void OnRent1Changed();
    partial void OnRent2Changing(int value);
    partial void OnRent2Changed();
    partial void OnRent3Changing(int value);
    partial void OnRent3Changed();
    partial void OnRent4Changing(int value);
    partial void OnRent4Changed();
    partial void OnRent5Changing(int value);
    partial void OnRent5Changed();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnGroupChanging(int value);
    partial void OnGroupChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnHouseCostChanging(int value);
    partial void OnHouseCostChanged();
    #endregion
		
		public HouseCardData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyCost", DbType="Int NOT NULL")]
		public int BuyCost
		{
			get
			{
				return this._BuyCost;
			}
			set
			{
				if ((this._BuyCost != value))
				{
					this.OnBuyCostChanging(value);
					this.SendPropertyChanging();
					this._BuyCost = value;
					this.SendPropertyChanged("BuyCost");
					this.OnBuyCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent0", DbType="Int NOT NULL")]
		public int Rent0
		{
			get
			{
				return this._Rent0;
			}
			set
			{
				if ((this._Rent0 != value))
				{
					this.OnRent0Changing(value);
					this.SendPropertyChanging();
					this._Rent0 = value;
					this.SendPropertyChanged("Rent0");
					this.OnRent0Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent1", DbType="Int NOT NULL")]
		public int Rent1
		{
			get
			{
				return this._Rent1;
			}
			set
			{
				if ((this._Rent1 != value))
				{
					this.OnRent1Changing(value);
					this.SendPropertyChanging();
					this._Rent1 = value;
					this.SendPropertyChanged("Rent1");
					this.OnRent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent2", DbType="Int NOT NULL")]
		public int Rent2
		{
			get
			{
				return this._Rent2;
			}
			set
			{
				if ((this._Rent2 != value))
				{
					this.OnRent2Changing(value);
					this.SendPropertyChanging();
					this._Rent2 = value;
					this.SendPropertyChanged("Rent2");
					this.OnRent2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent3", DbType="Int NOT NULL")]
		public int Rent3
		{
			get
			{
				return this._Rent3;
			}
			set
			{
				if ((this._Rent3 != value))
				{
					this.OnRent3Changing(value);
					this.SendPropertyChanging();
					this._Rent3 = value;
					this.SendPropertyChanged("Rent3");
					this.OnRent3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent4", DbType="Int NOT NULL")]
		public int Rent4
		{
			get
			{
				return this._Rent4;
			}
			set
			{
				if ((this._Rent4 != value))
				{
					this.OnRent4Changing(value);
					this.SendPropertyChanging();
					this._Rent4 = value;
					this.SendPropertyChanged("Rent4");
					this.OnRent4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent5", DbType="Int NOT NULL")]
		public int Rent5
		{
			get
			{
				return this._Rent5;
			}
			set
			{
				if ((this._Rent5 != value))
				{
					this.OnRent5Changing(value);
					this.SendPropertyChanging();
					this._Rent5 = value;
					this.SendPropertyChanged("Rent5");
					this.OnRent5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseCost", DbType="Int NOT NULL")]
		public int HouseCost
		{
			get
			{
				return this._HouseCost;
			}
			set
			{
				if ((this._HouseCost != value))
				{
					this.OnHouseCostChanging(value);
					this.SendPropertyChanging();
					this._HouseCost = value;
					this.SendPropertyChanged("HouseCost");
					this.OnHouseCostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
