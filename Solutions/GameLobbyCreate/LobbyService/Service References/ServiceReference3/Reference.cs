//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace LobbyService.ServiceReference3 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/LobbyService.Web.DTO")]
    public partial class Player : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AlreadExistField;
        
        private int DiceEyesField;
        
        private bool DiceOnceDoubleField;
        
        private int DiceOneField;
        
        private bool DiceTwiceDoubleField;
        
        private int DiceTwoField;
        
        private bool IsDiceRollingField;
        
        private bool JailField;
        
        private int PlayerIdField;
        
        private string PlayerNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlreadExist {
            get {
                return this.AlreadExistField;
            }
            set {
                if ((this.AlreadExistField.Equals(value) != true)) {
                    this.AlreadExistField = value;
                    this.RaisePropertyChanged("AlreadExist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DiceEyes {
            get {
                return this.DiceEyesField;
            }
            set {
                if ((this.DiceEyesField.Equals(value) != true)) {
                    this.DiceEyesField = value;
                    this.RaisePropertyChanged("DiceEyes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DiceOnceDouble {
            get {
                return this.DiceOnceDoubleField;
            }
            set {
                if ((this.DiceOnceDoubleField.Equals(value) != true)) {
                    this.DiceOnceDoubleField = value;
                    this.RaisePropertyChanged("DiceOnceDouble");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DiceOne {
            get {
                return this.DiceOneField;
            }
            set {
                if ((this.DiceOneField.Equals(value) != true)) {
                    this.DiceOneField = value;
                    this.RaisePropertyChanged("DiceOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DiceTwiceDouble {
            get {
                return this.DiceTwiceDoubleField;
            }
            set {
                if ((this.DiceTwiceDoubleField.Equals(value) != true)) {
                    this.DiceTwiceDoubleField = value;
                    this.RaisePropertyChanged("DiceTwiceDouble");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DiceTwo {
            get {
                return this.DiceTwoField;
            }
            set {
                if ((this.DiceTwoField.Equals(value) != true)) {
                    this.DiceTwoField = value;
                    this.RaisePropertyChanged("DiceTwo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDiceRolling {
            get {
                return this.IsDiceRollingField;
            }
            set {
                if ((this.IsDiceRollingField.Equals(value) != true)) {
                    this.IsDiceRollingField = value;
                    this.RaisePropertyChanged("IsDiceRolling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Jail {
            get {
                return this.JailField;
            }
            set {
                if ((this.JailField.Equals(value) != true)) {
                    this.JailField = value;
                    this.RaisePropertyChanged("Jail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerName {
            get {
                return this.PlayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNameField, value) != true)) {
                    this.PlayerNameField = value;
                    this.RaisePropertyChanged("PlayerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference3.IService3")]
    public interface IService3 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService3/DoWork", ReplyAction="http://tempuri.org/IService3/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService3/RollDice", ReplyAction="http://tempuri.org/IService3/RollDiceResponse")]
        System.IAsyncResult BeginRollDice(int id, System.AsyncCallback callback, object asyncState);
        
        void EndRollDice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService3/ShowDiceRoll", ReplyAction="http://tempuri.org/IService3/ShowDiceRollResponse")]
        System.IAsyncResult BeginShowDiceRoll(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player> EndShowDiceRoll(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService3Channel : LobbyService.ServiceReference3.IService3, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShowDiceRollCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShowDiceRollCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service3Client : System.ServiceModel.ClientBase<LobbyService.ServiceReference3.IService3>, LobbyService.ServiceReference3.IService3 {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginRollDiceDelegate;
        
        private EndOperationDelegate onEndRollDiceDelegate;
        
        private System.Threading.SendOrPostCallback onRollDiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginShowDiceRollDelegate;
        
        private EndOperationDelegate onEndShowDiceRollDelegate;
        
        private System.Threading.SendOrPostCallback onShowDiceRollCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service3Client() {
        }
        
        public Service3Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service3Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service3Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service3Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RollDiceCompleted;
        
        public event System.EventHandler<ShowDiceRollCompletedEventArgs> ShowDiceRollCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyService.ServiceReference3.IService3.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LobbyService.ServiceReference3.IService3.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LobbyService.ServiceReference3.IService3)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((LobbyService.ServiceReference3.IService3)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyService.ServiceReference3.IService3.BeginRollDice(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRollDice(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LobbyService.ServiceReference3.IService3.EndRollDice(System.IAsyncResult result) {
            base.Channel.EndRollDice(result);
        }
        
        private System.IAsyncResult OnBeginRollDice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((LobbyService.ServiceReference3.IService3)(this)).BeginRollDice(id, callback, asyncState);
        }
        
        private object[] OnEndRollDice(System.IAsyncResult result) {
            ((LobbyService.ServiceReference3.IService3)(this)).EndRollDice(result);
            return null;
        }
        
        private void OnRollDiceCompleted(object state) {
            if ((this.RollDiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RollDiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RollDiceAsync(int id) {
            this.RollDiceAsync(id, null);
        }
        
        public void RollDiceAsync(int id, object userState) {
            if ((this.onBeginRollDiceDelegate == null)) {
                this.onBeginRollDiceDelegate = new BeginOperationDelegate(this.OnBeginRollDice);
            }
            if ((this.onEndRollDiceDelegate == null)) {
                this.onEndRollDiceDelegate = new EndOperationDelegate(this.OnEndRollDice);
            }
            if ((this.onRollDiceCompletedDelegate == null)) {
                this.onRollDiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRollDiceCompleted);
            }
            base.InvokeAsync(this.onBeginRollDiceDelegate, new object[] {
                        id}, this.onEndRollDiceDelegate, this.onRollDiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyService.ServiceReference3.IService3.BeginShowDiceRoll(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShowDiceRoll(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player> LobbyService.ServiceReference3.IService3.EndShowDiceRoll(System.IAsyncResult result) {
            return base.Channel.EndShowDiceRoll(result);
        }
        
        private System.IAsyncResult OnBeginShowDiceRoll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LobbyService.ServiceReference3.IService3)(this)).BeginShowDiceRoll(callback, asyncState);
        }
        
        private object[] OnEndShowDiceRoll(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player> retVal = ((LobbyService.ServiceReference3.IService3)(this)).EndShowDiceRoll(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShowDiceRollCompleted(object state) {
            if ((this.ShowDiceRollCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShowDiceRollCompleted(this, new ShowDiceRollCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShowDiceRollAsync() {
            this.ShowDiceRollAsync(null);
        }
        
        public void ShowDiceRollAsync(object userState) {
            if ((this.onBeginShowDiceRollDelegate == null)) {
                this.onBeginShowDiceRollDelegate = new BeginOperationDelegate(this.OnBeginShowDiceRoll);
            }
            if ((this.onEndShowDiceRollDelegate == null)) {
                this.onEndShowDiceRollDelegate = new EndOperationDelegate(this.OnEndShowDiceRoll);
            }
            if ((this.onShowDiceRollCompletedDelegate == null)) {
                this.onShowDiceRollCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShowDiceRollCompleted);
            }
            base.InvokeAsync(this.onBeginShowDiceRollDelegate, null, this.onEndShowDiceRollDelegate, this.onShowDiceRollCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LobbyService.ServiceReference3.IService3 CreateChannel() {
            return new Service3ClientChannel(this);
        }
        
        private class Service3ClientChannel : ChannelBase<LobbyService.ServiceReference3.IService3>, LobbyService.ServiceReference3.IService3 {
            
            public Service3ClientChannel(System.ServiceModel.ClientBase<LobbyService.ServiceReference3.IService3> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginRollDice(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("RollDice", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRollDice(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RollDice", _args, result);
            }
            
            public System.IAsyncResult BeginShowDiceRoll(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ShowDiceRoll", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player> EndShowDiceRoll(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player> _result = ((System.Collections.ObjectModel.ObservableCollection<LobbyService.ServiceReference3.Player>)(base.EndInvoke("ShowDiceRoll", _args, result)));
                return _result;
            }
        }
    }
}
